    <所有标准库共有的函数>
 empty()                 判断容器是否为空
 max_size()              返回元素最大容器个数
 size()                  返回容器中元素的个数
 erase()                 从容器中清楚一个或多个元素、
 clear()                 清空容器
 resize(10)              调整容器的大小变成10个
 resize(20,1)            表示新增加的数据用1来填充
     =、<、>等。。运算符跟string的才做一样
 capacity()              返回容量大小
 reserve(值)             设置容器容量大小

    <迭代器>
pair<迭代器定义，迭代器定义> 有两个迭代器的迭代器
iterator or const_iterator
容器.begin()             返回一个指向第一个元素的迭代器地址
容器.end()               返回最后一个的下一个的迭代器地址
容器.rbegin()            逆序迭代器
容器.rend()              逆序迭代器

   <顺序容器的通用操作>
  有back()的或许也会有front()
push_back()              往后面插入一个元素
pop_back()               删除最后面一个元素
at()                     像数组一个访问容器里面的数据
c1.swap(c2)              两个容器交换
a.assign(迭代器，迭代器）给容器a赋值
a.earase(迭代器)         删除该容器
a.earase(迭代器，迭代器) 删除该段容器，这个是闭合区间删除
insert(迭代器，值)       把值添加到迭代器前面
insert(迭代器，num,值)   把值添加到迭代器前面,添加num个数值
insert(迭代器，开始迭代，结束迭代)在迭代器前面添加一段数据

vector不支持：front 
list不支持[]

    <顺序容器>
vector                   单向
deque                    双向顺序容器
list                     双向链表
iterator                 迭代器

   <容器适配器>
stack                    后进先出
queue                    先进先出
priority_queue           最高优先级元素总是第一个出列，可以设置最小优先级别

   <键值容器>
map                      对映射
multimap                 可重复的映射
  ・・・・三种插入・・・・
a.insert(map<int,string>::value_type(1,"One"));
a.insert(make_pair(-1,"Minus One"));
a.insert(pair<int,string>(1000,"One Thousand"));
   a[1000000]="One Million";
  ・・・・map迭代器的操作・・・・ 
a->first                 获取键值
a->second                获取对应的值
  ・・・・查找重复・・・・
coun(1000)               查找重复的1000有几个
find(2)                  寻找键值对应的迭代器
lower_bound(1000)        查找第一个1000
upper_bound(1000)        查找最后一个1000
  ・・・・删除・・・・
eraser(值)               括号里可以是键值，也可以是迭代器

   <set容器>
   关联式容器
  特点：插入之后每个数据都会排序
set                      快速查找，不允许重复值
myltiset                 快速查找，允许重复值
insert(数据)
其他api跟map的一样